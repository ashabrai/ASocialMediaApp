{
    "env": {
      "browser": true,
      "commonjs": true,
      "es6": true
    },
    "extends": [
      "eslint:recommended",
      "plugin:@typescript-eslint/recommended",
      "react-app",
      "plugin:react/recommended",
      "plugin:lodash/recommended"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
      "jsx": true,
      "useJSXTextNode": true
    },
    "plugins": ["@typescript-eslint", "lodash", "react-hooks", "prettier", "unused-imports"],
    "rules": {
      "dot-notation": "error",
      "no-console": "error",
      "no-restricted-imports": [
        "error",
        {
          "patterns": ["../*"]
        }
      ],
      "indent": "off",
      "no-mixed-operators": "off",
      "no-use-before-define": "error",
      "prettier/prettier": "error",
  
      "@typescript-eslint/array-type": ["error", { "default": "generic", "readonly": "generic" }],
      "@typescript-eslint/ban-ts-comment": "off",
      "@typescript-eslint/ban-types": [
        "error",
        {
          "types": {
            "_DeepReadonlyArray": "Use ReadonlyArray of types that are marked as readonly.",
            "DeepReadonly": "It produces terrible error messages and type pollution. Use Readonly/ReadonlyArray as needed instead."
          },
          "extendDefaults": false
        }
      ],
      "@typescript-eslint/camelcase": "off",
      "@typescript-eslint/consistent-type-definitions": ["error", "interface"], // interfaces have better intellisense than types
      "@typescript-eslint/explicit-function-return-type": "off",
      "@typescript-eslint/explicit-member-accessibility": "off",
      "@typescript-eslint/explicit-module-boundary-types": "off",
      "@typescript-eslint/indent": "off",
      "@typescript-eslint/member-delimiter-style": "off",
      "@typescript-eslint/naming-convention": [
        "error",
        {
          "selector": "enum",
          "format": ["StrictPascalCase"],
          "leadingUnderscore": "forbid",
          "trailingUnderscore": "forbid",
          "custom": {"regex": "Types$", "match": false} // Enums should be singular.
        },
        {
          "selector": "interface",
          "format": ["StrictPascalCase"],
          "leadingUnderscore": "forbid",
          "trailingUnderscore": "forbid",
          "custom": {"regex": "Type(s)?$", "match": false} // Don't add "Type" suffix to interfaces/types. They're already types.
        },
        {
          "selector": "typeAlias",
          "format": ["StrictPascalCase"],
          "leadingUnderscore": "forbid",
          "trailingUnderscore": "forbid",
          "custom": {"regex": "Type(s)?$", "match": false} // Don't add "Type" suffix to interfaces/types. They're already types.
        }
      ],
      "@typescript-eslint/no-empty-function": ["error", { "allow": ["arrowFunctions"] }],
      "@typescript-eslint/no-explicit-any": "off",
      "@typescript-eslint/no-namespace": [
        "error",
        {
          "allowDeclarations": true
        }
      ],
      "@typescript-eslint/no-non-null-assertion": "off",
      "@typescript-eslint/no-unused-vars": "off", // replaced by unused-imports functionality
      "@typescript-eslint/no-use-before-define": "off",
  
      "react-hooks/rules-of-hooks": "error",
      "react-hooks/exhaustive-deps": "warn",
      "lodash/import-scope": [2, "member"],
      "lodash/prefer-lodash-method": "off",
      "lodash/prefer-noop": "off",
      "lodash/prefer-constant": "off",
      "lodash/prefer-lodash-typecheck": "off",
      "lodash/prop-shorthand": "off",
      "lodash/matches-prop-shorthand": "off",
      "jsx-a11y/anchor-is-valid": "off",
      "react/prop-types": "off",
      "react/display-name": "off",
  
      "unused-imports/no-unused-imports-ts": "error",
      "unused-imports/no-unused-vars-ts": ["warn", {"vars": "all", "args": "after-used", "ignoreRestSiblings": true, "argsIgnorePattern": "^_" }
      ]
    }
  }
  